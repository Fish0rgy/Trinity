using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using VRC;
using VRC.SDKBase;
using VRC.Udon;

namespace Area51.SDK
{
    public static class UdonExploitManager
    {
        public static void udonsend(this GameObject Objectname, string udonEvent, VRC.Player player = null, bool componetcheck = false)
        {
            UdonBehaviour component = Objectname.GetComponent<UdonBehaviour>();
            if (!(player != null))
            {
                if (!componetcheck)
                {
                    if (player == VRCPlayer.field_Internal_Static_VRCPlayer_0._player)
                    {
                        component.SendCustomEvent(udonEvent);
                        return;
                    }
                    component.SendCustomNetworkEvent(0, udonEvent);
                }
                return;
            }
            SetEventOwner(Objectname, player);
            component.SendCustomNetworkEvent((VRC.Udon.Common.Interfaces.NetworkEventTarget)1, udonEvent);
        }
        public static void HQInteract(string ObjectName)
        {
            //foreach (GameObject Objects in BlackCatList())
            //{
            //    Objects.transform.Find(ObjectName).gameObject.SetObjecOwner();
            //    Objects.transform.Find(ObjectName).GetComponent<UdonBehaviour>().Interact();
            //}
        }
        public static void RoleAssign(string playerlist,string udonevent)
        {
            GameObject gameObject = GameObject.Find(playerlist);
            foreach (Transform transform in gameObject.GetComponentsInChildren<Transform>())
            {
                if (transform.name != gameObject.name)
                {
                    udonsend(transform.gameObject, udonevent, PlayerWrapper.LocalVRCPlayer._player, false);
                }
            }
        }

        public static void SendCustomNetworkEvent(string objpath, string udonevent)
        {
            GameObject gameObject = GameObject.Find(objpath);
            UdonBehaviour uDon = gameObject.GetComponent<UdonBehaviour>();
            try
            {
                uDon.SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.All, udonevent);
            }
            catch (Exception Error)
            {

            }
        }

        public static void RoleAssignEveryone(string udonevent)
        {
            GameObject gameObject = GameObject.Find("Player Nodes");
            foreach (Transform transform in gameObject.GetComponentsInChildren<Transform>())
            {
                if (transform.name != gameObject.name)
                {
                    udonsend(transform.gameObject, udonevent, null, false);
                }
            }
        }
        public static void TargetedEvent(string udonevent)
        {
            GameObject playernode = GameObject.Find("Player Nodes");
            foreach (Transform player in playernode.GetComponentsInChildren<Transform>())
            {
                if (player.name != playernode.name)
                {
                    player.gameObject.udonsend(udonevent, PlayerWrapper.SelectedVRCPlayer(), false);
                }
            }
        }
        //public static void TargetedObjectEvent(string udonevent)
        //{
        //    GameObject player = PlayerWrapper.SelectedVRCPlayer().gameObject;
        //    foreach(Transform playertransform in player.GetComponentsInChildren<Transform>())
        //    {
        //        playertransform.gameObject.udonsend(udonevent, PlayerWrapper.SelectedVRCPlayer(), false);
        //    }
        //}
        public static void TargetedEvent2(this GameObject PlayerObject, string udonEvent, VRC.Player player = null, bool componetcheck = false)
        {
            UdonBehaviour component = PlayerObject.GetComponent<UdonBehaviour>();
            if (!(player != null))
            {
                if (!componetcheck)
                {
                    if (player == PlayerWrapper.SelectedVRCPlayer())
                    {
                        component.SendCustomEvent(udonEvent);
                        return;
                    }
                    component.SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.All, udonEvent);
                }
                return;
            }
            SetEventOwner(PlayerObject, player);
            component.SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.All, udonEvent);
            //component.SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.All, udonEvent);
            //component.SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.Owner, udonEvent);
        }
         
        public static void SetEventOwner(this GameObject gameObject, VRC.Player player)
        {
            if (GrabOwner(gameObject) != player)
            {
                Networking.SetOwner(player.field_Private_VRCPlayerApi_0, gameObject);
            }
        }
        public static VRC.Player GrabOwner(this GameObject gameObject)
        {
            foreach (VRC.Player player in PlayerManager.field_Private_Static_PlayerManager_0.field_Private_List_1_Player_0)
            {
                if (player.field_Private_VRCPlayerApi_0.IsOwner(gameObject))
                {
                    return player;
                }
            }
            return null;
        }

        public static void SetObjecOwner(this GameObject gameObject)
        {
            if (GrabOwner(gameObject) != VRCPlayer.field_Internal_Static_VRCPlayer_0._player)
            {
                Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_VRCPlayerApi_0, gameObject);
            }
        }
        //VRC_Trigger -> allows you to Interact with mirror, floor colliders, buttons for everyone not just you
        public static void TriggerManager(string path, string objectname)
        {
            GameObject ObjectLocation = GameObject.Find(path);
            ObjectLocation.GetComponent<VRC_Trigger>().ExecuteCustomTrigger(objectname);
        }   

        //Black Cat Shit
        public static List<GameObject> HQObjectList()
        {
            List<GameObject> doors = new List<GameObject>();
            try
            {
                doors.Add(GameObject.Find("Mirror").transform.Find("HQ Button ON").gameObject);
                doors.Add(GameObject.Find("Mirror (1)").transform.Find("HQ Button ON").gameObject);
                doors.Add(GameObject.Find("Mirror (2)").transform.Find("HQ Button ON").gameObject);
                doors.Add(GameObject.Find("Mirror (3)").transform.Find("HQ Button ON").gameObject);
                doors.Add(GameObject.Find("Mirror (4)").transform.Find("HQ Button ON").gameObject);
                doors.Add(GameObject.Find("Mirror").transform.Find("HQ Button Off").gameObject);
                doors.Add(GameObject.Find("Mirror (1)").transform.Find("HQ Button Off").gameObject);
                doors.Add(GameObject.Find("Mirror (2)").transform.Find("HQ Button Off").gameObject);
                doors.Add(GameObject.Find("Mirror (3)").transform.Find("HQ Button Off").gameObject);
                doors.Add(GameObject.Find("Mirror (4)").transform.Find("HQ Button Off").gameObject);
            }
            catch
            {
            }
            return doors;
        }
        public static void ObjectEvent(string ObjectContainerList, string eventName)
        {
            foreach (GameObject objectList in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                bool objectCheck = objectList.name.Contains(ObjectContainerList);
                if (objectCheck)
                {
                    objectList.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.All, eventName);
                }
            }
        }
        public static void ObjectEventTargeted(string gameObject, string udonEvent, VRC.Player player = null)
        {
            foreach (GameObject objectList in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                bool objectCheck = objectList.name.Contains(gameObject);
                if (objectCheck)
                {
                    UdonBehaviour component = objectList.GetComponent<UdonBehaviour>();
                    SetEventOwner(objectList, player);
                    component.SendCustomNetworkEvent(VRC.Udon.Common.Interfaces.NetworkEventTarget.Owner, udonEvent);
                }
            }
        }
    }
}
