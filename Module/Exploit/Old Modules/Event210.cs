using Trinity.Utilities;
using Area51.SDK.Photon;
using ExitGames.Client.Photon;
using MelonLoader;
using Photon.Pun;
using System.Collections;
using UnityEngine;

namespace Area51.Module.Exploit
{
    class Event210 : BaseModule
    {
        public Event210() : base("Event210", "Desync Lobby", Main.Instance.Eventexploitbutton, null, true) { }

        public override void OnEnable()
        {
            MelonCoroutines.Start(Desync());
        }

        IEnumerator Desync()
        {
            PhotonView[] photonViews = Resources.FindObjectsOfTypeAll<PhotonView>();

            while (this.toggled)
            {
                for (int j = 0; j < 2; j++)
                {
                    for (int i = 0; i < photonViews.Length; i++)
                    {
                        PhotonExtensions.OpRaiseEvent(210, new int[]
                        {
                            photonViews[i].viewIdField,
                            VRC.Player.prop_Player_0.prop_VRCPlayerApi_0.playerId
                        }, new Photon.Realtime.RaiseEventOptions
                        {
                            field_Public_ReceiverGroup_0 = Photon.Realtime.ReceiverGroup.All,
                            field_Public_EventCaching_0 = Photon.Realtime.EventCaching.DoNotCache
                        }, default(SendOptions));
                        if (photonViews.Length % 3 == 0)
                            yield return new WaitForSecondsRealtime(0.25f);
                        PhotonExtensions.OpRaiseEvent(209, new int[]
                        {
                            photonViews[i].viewIdField,
                            VRC.Player.prop_Player_0.prop_VRCPlayerApi_0.playerId
                        }, new Photon.Realtime.RaiseEventOptions
                        {
                            field_Public_ReceiverGroup_0 = Photon.Realtime.ReceiverGroup.All,
                            field_Public_EventCaching_0 = Photon.Realtime.EventCaching.DoNotCache
                        }, default(SendOptions));
                    }
                }

                yield return new WaitForSecondsRealtime(0.1f);
            }
            yield break;
        }
    }
}