using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Trinity.Events;
using Trinity.SDK;
using Trinity.SDK.ButtonAPI;
using UnhollowerRuntimeLib;
using UnityEngine;
using UnityEngine.XR;

namespace Trinity.Module.Exploit.MiscExploits
{
    internal class SpectateMode : BaseModule, OnUpdateEvent
    {
        private static Camera _myCam;
        private static Transform _neck;
        private static Vector3 _originalScale;
        private static Camera _playerCam;
        private static bool isActive = false;
        public SpectateMode() : base("Spectate Mode", "", Main.Instance.Eventexploitbutton, QMButtonIcons.LoadSpriteFromFile(Serpent.FinderPath), true, false)
        {
        }


        public override void OnEnable()
        {
            isActive = true;
            MenuUI.Log("EXPLOITS: <color=green>Spectate Mode Active</color>");
            Main.Instance.OnUpdateEvents.Add(this);
        }

        public override void OnDisable()
        {
            isActive = false;
            MenuUI.Log("EXPLOITS: <color=red>Spectate Mode Deactiveated</color>");
            Main.Instance.OnUpdateEvents.Remove(this);
        }


        public void OnUpdate()
        {
            if (!isActive) return;
            if (Input.GetKeyDown(KeyCode.Alpha5))
            {
                _myCam.enabled = false;

                var ply = QuickMenu.prop_QuickMenu_0.field_Private_Player_0;

                if (ply.transform.Find("ForwardDirection/Avatar").GetComponent<Animator>()
                    .GetBoneTransform(HumanBodyBones.Head).FindChild("HmdPivot").GetComponent<Camera>())
                {
                    _playerCam = ply.transform.Find("ForwardDirection/Avatar").GetComponent<Animator>()
                        .GetBoneTransform(HumanBodyBones.Head).FindChild("HmdPivot").GetComponent<Camera>();
                    _playerCam.enabled = true;
                    _neck = ply.transform.Find("ForwardDirection/Avatar").GetComponent<Animator>()
                        .GetBoneTransform(HumanBodyBones.Neck);
                    _originalScale = _neck.localScale;
                    _neck.localScale = new Vector3(0, _originalScale.y, _originalScale.z);
                }
                else
                {
                    _playerCam = ply.transform.Find("ForwardDirection/Avatar").GetComponent<Animator>()
                        .GetBoneTransform(HumanBodyBones.Head).FindChild("HmdPivot").gameObject
                        .AddComponent<Camera>();
                    _playerCam.fieldOfView = 90;
                    _playerCam.nearClipPlane = 0.01f;
                    _playerCam.enabled = true;
                    _neck = ply.transform.Find("ForwardDirection/Avatar").GetComponent<Animator>()
                        .GetBoneTransform(HumanBodyBones.Neck);
                    _originalScale = _neck.localScale;
                    _neck.localScale = new Vector3(0, _originalScale.y, _originalScale.z);
                }
            }

            if (Input.GetKeyDown(KeyCode.Alpha6))
            {
                _myCam.enabled = true;
                _neck.localScale = _originalScale;
                _playerCam.enabled = false;
            }
        }
        public static IEnumerator VRChat_OnUiManagerInit()
        {
            
            while (RoomManager.field_Internal_Static_ApiWorld_0.id == null)
            {
                yield return new WaitForSeconds(1F);
            }
            _myCam = Camera.main;
            if (!XRDevice.isPresent)
            {
                try
                {
                    ClassInjector.RegisterTypeInIl2Cpp<InputComponent>();
                    var go = new GameObject("PovChangerMod");
                    UnityEngine.Object.DontDestroyOnLoad(go);
                    go.AddComponent<InputComponent>();
                }
                catch(Exception e) { LogHandler.Error(e); }
                   
            }
        }
    }
}
public class InputComponent : MonoBehaviour
{
    public InputComponent(IntPtr ptr) : base(ptr) { }
}
