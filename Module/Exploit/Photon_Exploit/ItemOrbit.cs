using Trinity.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Trinity.Events;
using Trinity.SDK;
using Harmony;
using UnityEngine;
using VRC.SDKBase;

namespace Trinity.Module.World
{
	internal class ItemOrbit : BaseModule, OnUpdateEvent
	{

		private GameObject puppet;

		public ItemOrbit() : base("ItemOrbit", "Makes all Pickups spin arround you", Main.Instance.Eventexploitbutton, Main.Instance.QuickMenuStuff.Button_RespawnIcon.sprite, true, false)
		{
		}

		public override void OnEnable()
		{ 
			MenuUI.Log("EXPLOITS: <color=green>Item Orbit Local Activated</color>");
			Main.Instance.OnUpdateEvents.Add(this);
		}

		public override void OnDisable()
		{
			MenuUI.Log("EXPLOITS: <color=red>Item Orbit Local Deactivated</color>");
			Main.Instance.OnUpdateEvents.Remove(this);
		}

		public void OnUpdate()
		{
			if (this.puppet == null)
			{
				this.puppet = new GameObject();
			}
			this.puppet.transform.position = PU.GetPlayer().transform.position + new Vector3(0f, 0.2f, 0f); //change these vectors to adjust orbit distance
			this.puppet.transform.Rotate(new Vector3(0f, 360f * Time.time * 1f, 0f));
			for (int i = 0; i < WorldWrapper.vrc_Pickups.Length; i++)
			{
				VRC_Pickup vrc_Pickup = WorldWrapper.vrc_Pickups[i];
				if (Networking.GetOwner(vrc_Pickup.gameObject) != Networking.LocalPlayer)
				{
					Networking.SetOwner(Networking.LocalPlayer, vrc_Pickup.gameObject); //think we can change this to allow for targeted orbit, would like to get orbit head working lol
				}
				vrc_Pickup.transform.position = this.puppet.transform.position + this.puppet.transform.forward * 1f;
				this.puppet.transform.Rotate(new Vector3(0f, (float)(360 / WorldWrapper.vrc_Pickups.Length), 0f));
			}
		}
	}
}