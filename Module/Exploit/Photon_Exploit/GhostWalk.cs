using Trinity.Utilities;
using Trinity.Events;
using Trinity.Module;
using Il2CppSystem;
using Photon.Realtime;
using Trinity.SDK;
using UnityEngine;
using System.Collections.Generic;

namespace Trinity.Modules.Exploits
{
     class Freecam : BaseModule, OnSendOPEvent
    {
        public static List<GameObject> E7Clone = new List<GameObject>();
        public Freecam() : base("Serialization", "Free camrea, move around without anyone seeing.", Main.Instance.Eventexploitbutton, null, true, false)
        {
        }

        public override void OnEnable()
        {
            MenuUI.Log("EXPLOITS: <color=green>Serialization Activated</color>");
            var Clone = UnityEngine.Object.Instantiate<GameObject>(PU.GetPlayer()._vrcplayer.prop_VRCAvatarManager_0.prop_GameObject_0, null, true);
            Animator component = Clone.GetComponent<Animator>();
            if (component != null && component.isHuman)
            {
                Transform boneTransform = component.GetBoneTransform((HumanBodyBones)10);
                if (boneTransform != null)
                    boneTransform.localScale = Vector3.one;
            }
            Clone.name = $"Cloned Avatar";
            component.enabled = false;
            //Clone.GetComponent<RootMotion.FinalIK.FullBodyBipedIK>().enabled = false;
            //Clone.GetComponent<LimbIK>().enabled = false;
            Clone.GetComponent<RootMotion.FinalIK.VRIK>().enabled = false;
            //Clone.GetComponent<RealisticEyeMovements.LookTargetController>().enabled = false;
            Clone.transform.position = PU.GetPlayer().transform.position;
            Clone.transform.rotation = PU.GetPlayer().transform.rotation;
            E7Clone.Add(Clone);
            Main.Instance.OnSendOPEvents.Add(this);
        }

        public override void OnDisable()
        {
            MenuUI.Log("EXPLOITS: <color=red>Serialization Deactivated</color>"); 
            foreach (var Clone in E7Clone)
                UnityEngine.Object.Destroy(Clone);
            Main.Instance.OnSendOPEvents.Remove(this);
        }

        public bool OnSendOP(byte opCode, ref Il2CppSystem.Object parameters, ref RaiseEventOptions raiseEventOptions)
        {
            return opCode != 7;
        }

    }
}
